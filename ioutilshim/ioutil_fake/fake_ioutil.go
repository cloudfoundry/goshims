// Code generated by counterfeiter. DO NOT EDIT.
package ioutil_fake

import (
	"io"
	"io/fs"
	"sync"

	"code.cloudfoundry.org/goshims/ioutilshim"
	"code.cloudfoundry.org/goshims/osshim"
)

type FakeIoutil struct {
	NopCloserStub        func(io.Reader) io.ReadCloser
	nopCloserMutex       sync.RWMutex
	nopCloserArgsForCall []struct {
		arg1 io.Reader
	}
	nopCloserReturns struct {
		result1 io.ReadCloser
	}
	nopCloserReturnsOnCall map[int]struct {
		result1 io.ReadCloser
	}
	ReadAllStub        func(io.Reader) ([]byte, error)
	readAllMutex       sync.RWMutex
	readAllArgsForCall []struct {
		arg1 io.Reader
	}
	readAllReturns struct {
		result1 []byte
		result2 error
	}
	readAllReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ReadDirStub        func(string) ([]fs.FileInfo, error)
	readDirMutex       sync.RWMutex
	readDirArgsForCall []struct {
		arg1 string
	}
	readDirReturns struct {
		result1 []fs.FileInfo
		result2 error
	}
	readDirReturnsOnCall map[int]struct {
		result1 []fs.FileInfo
		result2 error
	}
	ReadFileStub        func(string) ([]byte, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		arg1 string
	}
	readFileReturns struct {
		result1 []byte
		result2 error
	}
	readFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	TempDirStub        func(string, string) (string, error)
	tempDirMutex       sync.RWMutex
	tempDirArgsForCall []struct {
		arg1 string
		arg2 string
	}
	tempDirReturns struct {
		result1 string
		result2 error
	}
	tempDirReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	TempFileStub        func(string, string) (osshim.File, error)
	tempFileMutex       sync.RWMutex
	tempFileArgsForCall []struct {
		arg1 string
		arg2 string
	}
	tempFileReturns struct {
		result1 osshim.File
		result2 error
	}
	tempFileReturnsOnCall map[int]struct {
		result1 osshim.File
		result2 error
	}
	WriteFileStub        func(string, []byte, fs.FileMode) error
	writeFileMutex       sync.RWMutex
	writeFileArgsForCall []struct {
		arg1 string
		arg2 []byte
		arg3 fs.FileMode
	}
	writeFileReturns struct {
		result1 error
	}
	writeFileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIoutil) NopCloser(arg1 io.Reader) io.ReadCloser {
	fake.nopCloserMutex.Lock()
	ret, specificReturn := fake.nopCloserReturnsOnCall[len(fake.nopCloserArgsForCall)]
	fake.nopCloserArgsForCall = append(fake.nopCloserArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	stub := fake.NopCloserStub
	fakeReturns := fake.nopCloserReturns
	fake.recordInvocation("NopCloser", []interface{}{arg1})
	fake.nopCloserMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIoutil) NopCloserCallCount() int {
	fake.nopCloserMutex.RLock()
	defer fake.nopCloserMutex.RUnlock()
	return len(fake.nopCloserArgsForCall)
}

func (fake *FakeIoutil) NopCloserCalls(stub func(io.Reader) io.ReadCloser) {
	fake.nopCloserMutex.Lock()
	defer fake.nopCloserMutex.Unlock()
	fake.NopCloserStub = stub
}

func (fake *FakeIoutil) NopCloserArgsForCall(i int) io.Reader {
	fake.nopCloserMutex.RLock()
	defer fake.nopCloserMutex.RUnlock()
	argsForCall := fake.nopCloserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIoutil) NopCloserReturns(result1 io.ReadCloser) {
	fake.nopCloserMutex.Lock()
	defer fake.nopCloserMutex.Unlock()
	fake.NopCloserStub = nil
	fake.nopCloserReturns = struct {
		result1 io.ReadCloser
	}{result1}
}

func (fake *FakeIoutil) NopCloserReturnsOnCall(i int, result1 io.ReadCloser) {
	fake.nopCloserMutex.Lock()
	defer fake.nopCloserMutex.Unlock()
	fake.NopCloserStub = nil
	if fake.nopCloserReturnsOnCall == nil {
		fake.nopCloserReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
		})
	}
	fake.nopCloserReturnsOnCall[i] = struct {
		result1 io.ReadCloser
	}{result1}
}

func (fake *FakeIoutil) ReadAll(arg1 io.Reader) ([]byte, error) {
	fake.readAllMutex.Lock()
	ret, specificReturn := fake.readAllReturnsOnCall[len(fake.readAllArgsForCall)]
	fake.readAllArgsForCall = append(fake.readAllArgsForCall, struct {
		arg1 io.Reader
	}{arg1})
	stub := fake.ReadAllStub
	fakeReturns := fake.readAllReturns
	fake.recordInvocation("ReadAll", []interface{}{arg1})
	fake.readAllMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIoutil) ReadAllCallCount() int {
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	return len(fake.readAllArgsForCall)
}

func (fake *FakeIoutil) ReadAllCalls(stub func(io.Reader) ([]byte, error)) {
	fake.readAllMutex.Lock()
	defer fake.readAllMutex.Unlock()
	fake.ReadAllStub = stub
}

func (fake *FakeIoutil) ReadAllArgsForCall(i int) io.Reader {
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	argsForCall := fake.readAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIoutil) ReadAllReturns(result1 []byte, result2 error) {
	fake.readAllMutex.Lock()
	defer fake.readAllMutex.Unlock()
	fake.ReadAllStub = nil
	fake.readAllReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) ReadAllReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readAllMutex.Lock()
	defer fake.readAllMutex.Unlock()
	fake.ReadAllStub = nil
	if fake.readAllReturnsOnCall == nil {
		fake.readAllReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readAllReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) ReadDir(arg1 string) ([]fs.FileInfo, error) {
	fake.readDirMutex.Lock()
	ret, specificReturn := fake.readDirReturnsOnCall[len(fake.readDirArgsForCall)]
	fake.readDirArgsForCall = append(fake.readDirArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadDirStub
	fakeReturns := fake.readDirReturns
	fake.recordInvocation("ReadDir", []interface{}{arg1})
	fake.readDirMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIoutil) ReadDirCallCount() int {
	fake.readDirMutex.RLock()
	defer fake.readDirMutex.RUnlock()
	return len(fake.readDirArgsForCall)
}

func (fake *FakeIoutil) ReadDirCalls(stub func(string) ([]fs.FileInfo, error)) {
	fake.readDirMutex.Lock()
	defer fake.readDirMutex.Unlock()
	fake.ReadDirStub = stub
}

func (fake *FakeIoutil) ReadDirArgsForCall(i int) string {
	fake.readDirMutex.RLock()
	defer fake.readDirMutex.RUnlock()
	argsForCall := fake.readDirArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIoutil) ReadDirReturns(result1 []fs.FileInfo, result2 error) {
	fake.readDirMutex.Lock()
	defer fake.readDirMutex.Unlock()
	fake.ReadDirStub = nil
	fake.readDirReturns = struct {
		result1 []fs.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) ReadDirReturnsOnCall(i int, result1 []fs.FileInfo, result2 error) {
	fake.readDirMutex.Lock()
	defer fake.readDirMutex.Unlock()
	fake.ReadDirStub = nil
	if fake.readDirReturnsOnCall == nil {
		fake.readDirReturnsOnCall = make(map[int]struct {
			result1 []fs.FileInfo
			result2 error
		})
	}
	fake.readDirReturnsOnCall[i] = struct {
		result1 []fs.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) ReadFile(arg1 string) ([]byte, error) {
	fake.readFileMutex.Lock()
	ret, specificReturn := fake.readFileReturnsOnCall[len(fake.readFileArgsForCall)]
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadFileStub
	fakeReturns := fake.readFileReturns
	fake.recordInvocation("ReadFile", []interface{}{arg1})
	fake.readFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIoutil) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeIoutil) ReadFileCalls(stub func(string) ([]byte, error)) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = stub
}

func (fake *FakeIoutil) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	argsForCall := fake.readFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIoutil) ReadFileReturns(result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) ReadFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	if fake.readFileReturnsOnCall == nil {
		fake.readFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) TempDir(arg1 string, arg2 string) (string, error) {
	fake.tempDirMutex.Lock()
	ret, specificReturn := fake.tempDirReturnsOnCall[len(fake.tempDirArgsForCall)]
	fake.tempDirArgsForCall = append(fake.tempDirArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.TempDirStub
	fakeReturns := fake.tempDirReturns
	fake.recordInvocation("TempDir", []interface{}{arg1, arg2})
	fake.tempDirMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIoutil) TempDirCallCount() int {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return len(fake.tempDirArgsForCall)
}

func (fake *FakeIoutil) TempDirCalls(stub func(string, string) (string, error)) {
	fake.tempDirMutex.Lock()
	defer fake.tempDirMutex.Unlock()
	fake.TempDirStub = stub
}

func (fake *FakeIoutil) TempDirArgsForCall(i int) (string, string) {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	argsForCall := fake.tempDirArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIoutil) TempDirReturns(result1 string, result2 error) {
	fake.tempDirMutex.Lock()
	defer fake.tempDirMutex.Unlock()
	fake.TempDirStub = nil
	fake.tempDirReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) TempDirReturnsOnCall(i int, result1 string, result2 error) {
	fake.tempDirMutex.Lock()
	defer fake.tempDirMutex.Unlock()
	fake.TempDirStub = nil
	if fake.tempDirReturnsOnCall == nil {
		fake.tempDirReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.tempDirReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) TempFile(arg1 string, arg2 string) (osshim.File, error) {
	fake.tempFileMutex.Lock()
	ret, specificReturn := fake.tempFileReturnsOnCall[len(fake.tempFileArgsForCall)]
	fake.tempFileArgsForCall = append(fake.tempFileArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.TempFileStub
	fakeReturns := fake.tempFileReturns
	fake.recordInvocation("TempFile", []interface{}{arg1, arg2})
	fake.tempFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIoutil) TempFileCallCount() int {
	fake.tempFileMutex.RLock()
	defer fake.tempFileMutex.RUnlock()
	return len(fake.tempFileArgsForCall)
}

func (fake *FakeIoutil) TempFileCalls(stub func(string, string) (osshim.File, error)) {
	fake.tempFileMutex.Lock()
	defer fake.tempFileMutex.Unlock()
	fake.TempFileStub = stub
}

func (fake *FakeIoutil) TempFileArgsForCall(i int) (string, string) {
	fake.tempFileMutex.RLock()
	defer fake.tempFileMutex.RUnlock()
	argsForCall := fake.tempFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIoutil) TempFileReturns(result1 osshim.File, result2 error) {
	fake.tempFileMutex.Lock()
	defer fake.tempFileMutex.Unlock()
	fake.TempFileStub = nil
	fake.tempFileReturns = struct {
		result1 osshim.File
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) TempFileReturnsOnCall(i int, result1 osshim.File, result2 error) {
	fake.tempFileMutex.Lock()
	defer fake.tempFileMutex.Unlock()
	fake.TempFileStub = nil
	if fake.tempFileReturnsOnCall == nil {
		fake.tempFileReturnsOnCall = make(map[int]struct {
			result1 osshim.File
			result2 error
		})
	}
	fake.tempFileReturnsOnCall[i] = struct {
		result1 osshim.File
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) WriteFile(arg1 string, arg2 []byte, arg3 fs.FileMode) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.writeFileMutex.Lock()
	ret, specificReturn := fake.writeFileReturnsOnCall[len(fake.writeFileArgsForCall)]
	fake.writeFileArgsForCall = append(fake.writeFileArgsForCall, struct {
		arg1 string
		arg2 []byte
		arg3 fs.FileMode
	}{arg1, arg2Copy, arg3})
	stub := fake.WriteFileStub
	fakeReturns := fake.writeFileReturns
	fake.recordInvocation("WriteFile", []interface{}{arg1, arg2Copy, arg3})
	fake.writeFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIoutil) WriteFileCallCount() int {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return len(fake.writeFileArgsForCall)
}

func (fake *FakeIoutil) WriteFileCalls(stub func(string, []byte, fs.FileMode) error) {
	fake.writeFileMutex.Lock()
	defer fake.writeFileMutex.Unlock()
	fake.WriteFileStub = stub
}

func (fake *FakeIoutil) WriteFileArgsForCall(i int) (string, []byte, fs.FileMode) {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	argsForCall := fake.writeFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIoutil) WriteFileReturns(result1 error) {
	fake.writeFileMutex.Lock()
	defer fake.writeFileMutex.Unlock()
	fake.WriteFileStub = nil
	fake.writeFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIoutil) WriteFileReturnsOnCall(i int, result1 error) {
	fake.writeFileMutex.Lock()
	defer fake.writeFileMutex.Unlock()
	fake.WriteFileStub = nil
	if fake.writeFileReturnsOnCall == nil {
		fake.writeFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIoutil) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nopCloserMutex.RLock()
	defer fake.nopCloserMutex.RUnlock()
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	fake.readDirMutex.RLock()
	defer fake.readDirMutex.RUnlock()
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	fake.tempFileMutex.RLock()
	defer fake.tempFileMutex.RUnlock()
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIoutil) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ioutilshim.Ioutil = new(FakeIoutil)
