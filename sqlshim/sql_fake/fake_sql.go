// Code generated by counterfeiter. DO NOT EDIT.
package sql_fake

import (
	"database/sql/driver"
	"sync"

	"code.cloudfoundry.org/goshims/sqlshim"
)

type FakeSql struct {
	DriversStub        func() []string
	driversMutex       sync.RWMutex
	driversArgsForCall []struct {
	}
	driversReturns struct {
		result1 []string
	}
	driversReturnsOnCall map[int]struct {
		result1 []string
	}
	OpenStub        func(string, string) (sqlshim.SqlDB, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		arg1 string
		arg2 string
	}
	openReturns struct {
		result1 sqlshim.SqlDB
		result2 error
	}
	openReturnsOnCall map[int]struct {
		result1 sqlshim.SqlDB
		result2 error
	}
	RegisterStub        func(string, driver.Driver)
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 string
		arg2 driver.Driver
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSql) Drivers() []string {
	fake.driversMutex.Lock()
	ret, specificReturn := fake.driversReturnsOnCall[len(fake.driversArgsForCall)]
	fake.driversArgsForCall = append(fake.driversArgsForCall, struct {
	}{})
	stub := fake.DriversStub
	fakeReturns := fake.driversReturns
	fake.recordInvocation("Drivers", []interface{}{})
	fake.driversMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSql) DriversCallCount() int {
	fake.driversMutex.RLock()
	defer fake.driversMutex.RUnlock()
	return len(fake.driversArgsForCall)
}

func (fake *FakeSql) DriversCalls(stub func() []string) {
	fake.driversMutex.Lock()
	defer fake.driversMutex.Unlock()
	fake.DriversStub = stub
}

func (fake *FakeSql) DriversReturns(result1 []string) {
	fake.driversMutex.Lock()
	defer fake.driversMutex.Unlock()
	fake.DriversStub = nil
	fake.driversReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSql) DriversReturnsOnCall(i int, result1 []string) {
	fake.driversMutex.Lock()
	defer fake.driversMutex.Unlock()
	fake.DriversStub = nil
	if fake.driversReturnsOnCall == nil {
		fake.driversReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.driversReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSql) Open(arg1 string, arg2 string) (sqlshim.SqlDB, error) {
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.OpenStub
	fakeReturns := fake.openReturns
	fake.recordInvocation("Open", []interface{}{arg1, arg2})
	fake.openMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSql) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeSql) OpenCalls(stub func(string, string) (sqlshim.SqlDB, error)) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = stub
}

func (fake *FakeSql) OpenArgsForCall(i int) (string, string) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	argsForCall := fake.openArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSql) OpenReturns(result1 sqlshim.SqlDB, result2 error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 sqlshim.SqlDB
		result2 error
	}{result1, result2}
}

func (fake *FakeSql) OpenReturnsOnCall(i int, result1 sqlshim.SqlDB, result2 error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 sqlshim.SqlDB
			result2 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 sqlshim.SqlDB
		result2 error
	}{result1, result2}
}

func (fake *FakeSql) Register(arg1 string, arg2 driver.Driver) {
	fake.registerMutex.Lock()
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 string
		arg2 driver.Driver
	}{arg1, arg2})
	stub := fake.RegisterStub
	fake.recordInvocation("Register", []interface{}{arg1, arg2})
	fake.registerMutex.Unlock()
	if stub != nil {
		fake.RegisterStub(arg1, arg2)
	}
}

func (fake *FakeSql) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeSql) RegisterCalls(stub func(string, driver.Driver)) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = stub
}

func (fake *FakeSql) RegisterArgsForCall(i int) (string, driver.Driver) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	argsForCall := fake.registerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSql) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.driversMutex.RLock()
	defer fake.driversMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSql) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlshim.Sql = new(FakeSql)
