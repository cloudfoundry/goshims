// Code generated by counterfeiter. DO NOT EDIT.
package bufio_fake

import (
	"sync"

	"code.cloudfoundry.org/goshims/bufioshim"
)

type FakeReader struct {
	ReadStringStub        func(byte) (string, error)
	readStringMutex       sync.RWMutex
	readStringArgsForCall []struct {
		arg1 byte
	}
	readStringReturns struct {
		result1 string
		result2 error
	}
	readStringReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReader) ReadString(arg1 byte) (string, error) {
	fake.readStringMutex.Lock()
	ret, specificReturn := fake.readStringReturnsOnCall[len(fake.readStringArgsForCall)]
	fake.readStringArgsForCall = append(fake.readStringArgsForCall, struct {
		arg1 byte
	}{arg1})
	stub := fake.ReadStringStub
	fakeReturns := fake.readStringReturns
	fake.recordInvocation("ReadString", []interface{}{arg1})
	fake.readStringMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) ReadStringCallCount() int {
	fake.readStringMutex.RLock()
	defer fake.readStringMutex.RUnlock()
	return len(fake.readStringArgsForCall)
}

func (fake *FakeReader) ReadStringCalls(stub func(byte) (string, error)) {
	fake.readStringMutex.Lock()
	defer fake.readStringMutex.Unlock()
	fake.ReadStringStub = stub
}

func (fake *FakeReader) ReadStringArgsForCall(i int) byte {
	fake.readStringMutex.RLock()
	defer fake.readStringMutex.RUnlock()
	argsForCall := fake.readStringArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) ReadStringReturns(result1 string, result2 error) {
	fake.readStringMutex.Lock()
	defer fake.readStringMutex.Unlock()
	fake.ReadStringStub = nil
	fake.readStringReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) ReadStringReturnsOnCall(i int, result1 string, result2 error) {
	fake.readStringMutex.Lock()
	defer fake.readStringMutex.Unlock()
	fake.ReadStringStub = nil
	if fake.readStringReturnsOnCall == nil {
		fake.readStringReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.readStringReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readStringMutex.RLock()
	defer fake.readStringMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bufioshim.Reader = new(FakeReader)
