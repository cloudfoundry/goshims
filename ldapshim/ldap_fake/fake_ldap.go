// Code generated by counterfeiter. DO NOT EDIT.
package ldap_fake

import (
	"crypto/tls"
	"sync"

	"code.cloudfoundry.org/goshims/ldapshim"
	ldap "gopkg.in/ldap.v2"
)

type FakeLdap struct {
	DialStub        func(string, string) (ldapshim.LdapConnection, error)
	dialMutex       sync.RWMutex
	dialArgsForCall []struct {
		arg1 string
		arg2 string
	}
	dialReturns struct {
		result1 ldapshim.LdapConnection
		result2 error
	}
	dialReturnsOnCall map[int]struct {
		result1 ldapshim.LdapConnection
		result2 error
	}
	DialTLSStub        func(string, string, *tls.Config) (ldapshim.LdapConnection, error)
	dialTLSMutex       sync.RWMutex
	dialTLSArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *tls.Config
	}
	dialTLSReturns struct {
		result1 ldapshim.LdapConnection
		result2 error
	}
	dialTLSReturnsOnCall map[int]struct {
		result1 ldapshim.LdapConnection
		result2 error
	}
	NewSearchRequestStub        func(string, int, int, int, int, bool, string, []string, []ldap.Control) *ldap.SearchRequest
	newSearchRequestMutex       sync.RWMutex
	newSearchRequestArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
		arg4 int
		arg5 int
		arg6 bool
		arg7 string
		arg8 []string
		arg9 []ldap.Control
	}
	newSearchRequestReturns struct {
		result1 *ldap.SearchRequest
	}
	newSearchRequestReturnsOnCall map[int]struct {
		result1 *ldap.SearchRequest
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLdap) Dial(arg1 string, arg2 string) (ldapshim.LdapConnection, error) {
	fake.dialMutex.Lock()
	ret, specificReturn := fake.dialReturnsOnCall[len(fake.dialArgsForCall)]
	fake.dialArgsForCall = append(fake.dialArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DialStub
	fakeReturns := fake.dialReturns
	fake.recordInvocation("Dial", []interface{}{arg1, arg2})
	fake.dialMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdap) DialCallCount() int {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return len(fake.dialArgsForCall)
}

func (fake *FakeLdap) DialCalls(stub func(string, string) (ldapshim.LdapConnection, error)) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = stub
}

func (fake *FakeLdap) DialArgsForCall(i int) (string, string) {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	argsForCall := fake.dialArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLdap) DialReturns(result1 ldapshim.LdapConnection, result2 error) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = nil
	fake.dialReturns = struct {
		result1 ldapshim.LdapConnection
		result2 error
	}{result1, result2}
}

func (fake *FakeLdap) DialReturnsOnCall(i int, result1 ldapshim.LdapConnection, result2 error) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = nil
	if fake.dialReturnsOnCall == nil {
		fake.dialReturnsOnCall = make(map[int]struct {
			result1 ldapshim.LdapConnection
			result2 error
		})
	}
	fake.dialReturnsOnCall[i] = struct {
		result1 ldapshim.LdapConnection
		result2 error
	}{result1, result2}
}

func (fake *FakeLdap) DialTLS(arg1 string, arg2 string, arg3 *tls.Config) (ldapshim.LdapConnection, error) {
	fake.dialTLSMutex.Lock()
	ret, specificReturn := fake.dialTLSReturnsOnCall[len(fake.dialTLSArgsForCall)]
	fake.dialTLSArgsForCall = append(fake.dialTLSArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *tls.Config
	}{arg1, arg2, arg3})
	stub := fake.DialTLSStub
	fakeReturns := fake.dialTLSReturns
	fake.recordInvocation("DialTLS", []interface{}{arg1, arg2, arg3})
	fake.dialTLSMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdap) DialTLSCallCount() int {
	fake.dialTLSMutex.RLock()
	defer fake.dialTLSMutex.RUnlock()
	return len(fake.dialTLSArgsForCall)
}

func (fake *FakeLdap) DialTLSCalls(stub func(string, string, *tls.Config) (ldapshim.LdapConnection, error)) {
	fake.dialTLSMutex.Lock()
	defer fake.dialTLSMutex.Unlock()
	fake.DialTLSStub = stub
}

func (fake *FakeLdap) DialTLSArgsForCall(i int) (string, string, *tls.Config) {
	fake.dialTLSMutex.RLock()
	defer fake.dialTLSMutex.RUnlock()
	argsForCall := fake.dialTLSArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLdap) DialTLSReturns(result1 ldapshim.LdapConnection, result2 error) {
	fake.dialTLSMutex.Lock()
	defer fake.dialTLSMutex.Unlock()
	fake.DialTLSStub = nil
	fake.dialTLSReturns = struct {
		result1 ldapshim.LdapConnection
		result2 error
	}{result1, result2}
}

func (fake *FakeLdap) DialTLSReturnsOnCall(i int, result1 ldapshim.LdapConnection, result2 error) {
	fake.dialTLSMutex.Lock()
	defer fake.dialTLSMutex.Unlock()
	fake.DialTLSStub = nil
	if fake.dialTLSReturnsOnCall == nil {
		fake.dialTLSReturnsOnCall = make(map[int]struct {
			result1 ldapshim.LdapConnection
			result2 error
		})
	}
	fake.dialTLSReturnsOnCall[i] = struct {
		result1 ldapshim.LdapConnection
		result2 error
	}{result1, result2}
}

func (fake *FakeLdap) NewSearchRequest(arg1 string, arg2 int, arg3 int, arg4 int, arg5 int, arg6 bool, arg7 string, arg8 []string, arg9 []ldap.Control) *ldap.SearchRequest {
	var arg8Copy []string
	if arg8 != nil {
		arg8Copy = make([]string, len(arg8))
		copy(arg8Copy, arg8)
	}
	var arg9Copy []ldap.Control
	if arg9 != nil {
		arg9Copy = make([]ldap.Control, len(arg9))
		copy(arg9Copy, arg9)
	}
	fake.newSearchRequestMutex.Lock()
	ret, specificReturn := fake.newSearchRequestReturnsOnCall[len(fake.newSearchRequestArgsForCall)]
	fake.newSearchRequestArgsForCall = append(fake.newSearchRequestArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
		arg4 int
		arg5 int
		arg6 bool
		arg7 string
		arg8 []string
		arg9 []ldap.Control
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8Copy, arg9Copy})
	stub := fake.NewSearchRequestStub
	fakeReturns := fake.newSearchRequestReturns
	fake.recordInvocation("NewSearchRequest", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8Copy, arg9Copy})
	fake.newSearchRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLdap) NewSearchRequestCallCount() int {
	fake.newSearchRequestMutex.RLock()
	defer fake.newSearchRequestMutex.RUnlock()
	return len(fake.newSearchRequestArgsForCall)
}

func (fake *FakeLdap) NewSearchRequestCalls(stub func(string, int, int, int, int, bool, string, []string, []ldap.Control) *ldap.SearchRequest) {
	fake.newSearchRequestMutex.Lock()
	defer fake.newSearchRequestMutex.Unlock()
	fake.NewSearchRequestStub = stub
}

func (fake *FakeLdap) NewSearchRequestArgsForCall(i int) (string, int, int, int, int, bool, string, []string, []ldap.Control) {
	fake.newSearchRequestMutex.RLock()
	defer fake.newSearchRequestMutex.RUnlock()
	argsForCall := fake.newSearchRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8, argsForCall.arg9
}

func (fake *FakeLdap) NewSearchRequestReturns(result1 *ldap.SearchRequest) {
	fake.newSearchRequestMutex.Lock()
	defer fake.newSearchRequestMutex.Unlock()
	fake.NewSearchRequestStub = nil
	fake.newSearchRequestReturns = struct {
		result1 *ldap.SearchRequest
	}{result1}
}

func (fake *FakeLdap) NewSearchRequestReturnsOnCall(i int, result1 *ldap.SearchRequest) {
	fake.newSearchRequestMutex.Lock()
	defer fake.newSearchRequestMutex.Unlock()
	fake.NewSearchRequestStub = nil
	if fake.newSearchRequestReturnsOnCall == nil {
		fake.newSearchRequestReturnsOnCall = make(map[int]struct {
			result1 *ldap.SearchRequest
		})
	}
	fake.newSearchRequestReturnsOnCall[i] = struct {
		result1 *ldap.SearchRequest
	}{result1}
}

func (fake *FakeLdap) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	fake.dialTLSMutex.RLock()
	defer fake.dialTLSMutex.RUnlock()
	fake.newSearchRequestMutex.RLock()
	defer fake.newSearchRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLdap) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ldapshim.Ldap = new(FakeLdap)
