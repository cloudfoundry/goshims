// Code generated by counterfeiter. DO NOT EDIT.
package exec_fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/goshims/execshim"
)

type FakeExec struct {
	CommandStub        func(string, ...string) execshim.Cmd
	commandMutex       sync.RWMutex
	commandArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	commandReturns struct {
		result1 execshim.Cmd
	}
	commandReturnsOnCall map[int]struct {
		result1 execshim.Cmd
	}
	CommandContextStub        func(context.Context, string, ...string) execshim.Cmd
	commandContextMutex       sync.RWMutex
	commandContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	commandContextReturns struct {
		result1 execshim.Cmd
	}
	commandContextReturnsOnCall map[int]struct {
		result1 execshim.Cmd
	}
	LookPathStub        func(string) (string, error)
	lookPathMutex       sync.RWMutex
	lookPathArgsForCall []struct {
		arg1 string
	}
	lookPathReturns struct {
		result1 string
		result2 error
	}
	lookPathReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExec) Command(arg1 string, arg2 ...string) execshim.Cmd {
	fake.commandMutex.Lock()
	ret, specificReturn := fake.commandReturnsOnCall[len(fake.commandArgsForCall)]
	fake.commandArgsForCall = append(fake.commandArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.CommandStub
	fakeReturns := fake.commandReturns
	fake.recordInvocation("Command", []interface{}{arg1, arg2})
	fake.commandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExec) CommandCallCount() int {
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	return len(fake.commandArgsForCall)
}

func (fake *FakeExec) CommandCalls(stub func(string, ...string) execshim.Cmd) {
	fake.commandMutex.Lock()
	defer fake.commandMutex.Unlock()
	fake.CommandStub = stub
}

func (fake *FakeExec) CommandArgsForCall(i int) (string, []string) {
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	argsForCall := fake.commandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeExec) CommandReturns(result1 execshim.Cmd) {
	fake.commandMutex.Lock()
	defer fake.commandMutex.Unlock()
	fake.CommandStub = nil
	fake.commandReturns = struct {
		result1 execshim.Cmd
	}{result1}
}

func (fake *FakeExec) CommandReturnsOnCall(i int, result1 execshim.Cmd) {
	fake.commandMutex.Lock()
	defer fake.commandMutex.Unlock()
	fake.CommandStub = nil
	if fake.commandReturnsOnCall == nil {
		fake.commandReturnsOnCall = make(map[int]struct {
			result1 execshim.Cmd
		})
	}
	fake.commandReturnsOnCall[i] = struct {
		result1 execshim.Cmd
	}{result1}
}

func (fake *FakeExec) CommandContext(arg1 context.Context, arg2 string, arg3 ...string) execshim.Cmd {
	fake.commandContextMutex.Lock()
	ret, specificReturn := fake.commandContextReturnsOnCall[len(fake.commandContextArgsForCall)]
	fake.commandContextArgsForCall = append(fake.commandContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.CommandContextStub
	fakeReturns := fake.commandContextReturns
	fake.recordInvocation("CommandContext", []interface{}{arg1, arg2, arg3})
	fake.commandContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExec) CommandContextCallCount() int {
	fake.commandContextMutex.RLock()
	defer fake.commandContextMutex.RUnlock()
	return len(fake.commandContextArgsForCall)
}

func (fake *FakeExec) CommandContextCalls(stub func(context.Context, string, ...string) execshim.Cmd) {
	fake.commandContextMutex.Lock()
	defer fake.commandContextMutex.Unlock()
	fake.CommandContextStub = stub
}

func (fake *FakeExec) CommandContextArgsForCall(i int) (context.Context, string, []string) {
	fake.commandContextMutex.RLock()
	defer fake.commandContextMutex.RUnlock()
	argsForCall := fake.commandContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeExec) CommandContextReturns(result1 execshim.Cmd) {
	fake.commandContextMutex.Lock()
	defer fake.commandContextMutex.Unlock()
	fake.CommandContextStub = nil
	fake.commandContextReturns = struct {
		result1 execshim.Cmd
	}{result1}
}

func (fake *FakeExec) CommandContextReturnsOnCall(i int, result1 execshim.Cmd) {
	fake.commandContextMutex.Lock()
	defer fake.commandContextMutex.Unlock()
	fake.CommandContextStub = nil
	if fake.commandContextReturnsOnCall == nil {
		fake.commandContextReturnsOnCall = make(map[int]struct {
			result1 execshim.Cmd
		})
	}
	fake.commandContextReturnsOnCall[i] = struct {
		result1 execshim.Cmd
	}{result1}
}

func (fake *FakeExec) LookPath(arg1 string) (string, error) {
	fake.lookPathMutex.Lock()
	ret, specificReturn := fake.lookPathReturnsOnCall[len(fake.lookPathArgsForCall)]
	fake.lookPathArgsForCall = append(fake.lookPathArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.LookPathStub
	fakeReturns := fake.lookPathReturns
	fake.recordInvocation("LookPath", []interface{}{arg1})
	fake.lookPathMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeExec) LookPathCallCount() int {
	fake.lookPathMutex.RLock()
	defer fake.lookPathMutex.RUnlock()
	return len(fake.lookPathArgsForCall)
}

func (fake *FakeExec) LookPathCalls(stub func(string) (string, error)) {
	fake.lookPathMutex.Lock()
	defer fake.lookPathMutex.Unlock()
	fake.LookPathStub = stub
}

func (fake *FakeExec) LookPathArgsForCall(i int) string {
	fake.lookPathMutex.RLock()
	defer fake.lookPathMutex.RUnlock()
	argsForCall := fake.lookPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeExec) LookPathReturns(result1 string, result2 error) {
	fake.lookPathMutex.Lock()
	defer fake.lookPathMutex.Unlock()
	fake.LookPathStub = nil
	fake.lookPathReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeExec) LookPathReturnsOnCall(i int, result1 string, result2 error) {
	fake.lookPathMutex.Lock()
	defer fake.lookPathMutex.Unlock()
	fake.LookPathStub = nil
	if fake.lookPathReturnsOnCall == nil {
		fake.lookPathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.lookPathReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeExec) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	fake.commandContextMutex.RLock()
	defer fake.commandContextMutex.RUnlock()
	fake.lookPathMutex.RLock()
	defer fake.lookPathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExec) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ execshim.Exec = new(FakeExec)
